# Mycelia Repository Rules

## Project Overview
This is a Deno-based personal timeline and memory management system using Remix, React, TypeScript, and Tailwind CSS. The application tracks events, manages timelines, and provides data visualization capabilities.

## Technology Stack
- **Runtime**: Deno
- **Framework**: Remix (React-based full-stack framework)
- **Frontend**: React 18, TypeScript, Tailwind CSS 4
- **Backend**: Deno with Express
- **Database**: MongoDB with Mongoose ODM
- **Cache/Queue**: Redis with BullMQ
- **Build Tool**: Vite
- **UI Components**: Radix UI primitives with custom styling

## Code Organization

### Directory Structure
- `app/` - Main application code (Remix routes, components, services)
- `app/routes/` - Remix route components
- `app/components/` - Reusable React components
- `app/services/` - Business logic and external service integrations
- `app/stores/` - State management (Zustand)
- `app/hooks/` - Custom React hooks
- `app/lib/` - Utility functions and shared code
- `app/types/` - TypeScript type definitions
- `python/` - Python scripts for data processing
- `scripts/` - Build and utility scripts

### Import Conventions
- Use `@/` alias for app directory imports: `import { Component } from '@/components/Component'`
- Use JSR imports for Deno packages: `import { Command } from '@cliffy/command'`
- Use npm imports for Node.js packages: `import React from 'npm:react'`

### TypeScript
- Use strict TypeScript configuration
- Prefer explicit types over `any`
- Use interfaces for object shapes, types for unions/primitives
- Leverage Zod for runtime validation
- Use proper type imports: `import type { ComponentProps } from 'react'`

 ### Things to avoid
- Never use comments in the code, make the code self-documenting